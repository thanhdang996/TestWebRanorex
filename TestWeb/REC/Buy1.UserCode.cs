///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// Your custom recording code should go in this file.
// The designer will only add methods to this file, so your custom code won't be overwritten.
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;
using System.Xml.Linq;
using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Repository;
using Ranorex.Core.Testing;

namespace TestWeb.REC
{
    public partial class Buy1
    {
        /// <summary>
        /// This method gets called right after the recording has been started.
        /// It can be used to execute recording specific initialization code.
        /// </summary>
        private void Init()
        {
            // Your recording specific initialization code goes here.
        }

        public void ValidateQuantity(RepoItemInfo quantityItem, RepoItemInfo total)
        {
            IList<Ranorex.Unknown> listQuantity = quantityItem.CreateAdapters<Ranorex.Unknown>();
            int totalNumber = Int32.Parse(total.CreateAdapter<Ranorex.Unknown>(true).Element.GetAttributeValue("InnerText").ToString());
        	int num = 0;
    		foreach(Ranorex.Unknown number in listQuantity) {
	    		string text = number.Element.GetAttributeValue("InnerText").ToString();
	    		num += Int32.Parse(text);
    		}
        	Validate.IsTrue(num == totalNumber, "Quantity true");
        }
        
        private double HandleString(RepoItemInfo repoItem) 
        {
        	string textInner = repoItem.CreateAdapter<Ranorex.Unknown>(true).Element.GetAttributeValue("InnerText").ToString();
        	string textRemoveDollar = textInner.Replace("$", "");
        	double num = Double.Parse(textRemoveDollar);
        	return num;
        }

        public void ValidateTotalMoney(RepoItemInfo itemPrice, RepoItemInfo totalProducts, RepoItemInfo totalShipping, RepoItemInfo totalPriceWithoutTax, RepoItemInfo taxPrice, RepoItemInfo totalPrice)
        {
            IList<Ranorex.Unknown> listItemPrice = itemPrice.CreateAdapters<Ranorex.Unknown>();
            
            double totalProductsNumber = HandleString(totalProducts);
            double totalShippingNumber = HandleString(totalShipping);
            double totalPriceWithoutTaxNumber = HandleString(totalPriceWithoutTax);
            double taxPriceNumber = HandleString(taxPrice);
            double totalPriceNumber = HandleString(totalPrice);
            
            double num = 0;
    		foreach(Ranorex.Unknown number in listItemPrice) {
	    		string text = number.Element.GetAttributeValue("InnerText").ToString();
	    		string textRemoveDollar = text.Replace("$", "");
	    		num += Double.Parse(textRemoveDollar);
    		}
            
            Validate.IsTrue(num == totalProductsNumber, "Total Product");
        	Validate.IsTrue(totalProductsNumber + totalShippingNumber == totalPriceWithoutTaxNumber, "Total Product with ship");
        	Validate.IsTrue(totalPriceWithoutTaxNumber + taxPriceNumber == totalPriceNumber, "Total product with tax");
        }
    }
}
